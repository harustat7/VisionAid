import React, { useEffect, useState } from 'react'
import { Calendar, User, Eye, Download, ExternalLink } from 'lucide-react'
import { CataractDetection } from '../types'
import { supabase } from '../lib/supabase'

export const HistoryList: React.FC = () => {
  const [detections, setDetections] = useState<CataractDetection[]>([])
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    fetchDetections()
  }, [])

  const fetchDetections = async () => {
    try {
      const { data, error } = await supabase
        .from('cataract_detections')
        .select('*')
        .order('created_at', { ascending: false })
        .limit(10)

      if (error) throw error
      setDetections(data || [])
    } catch (error) {
      console.error('Error fetching detections:', error)
    } finally {
      setLoading(false)
    }
  }

  const getResultBadge = (result: string) => {
    const colors = {
      positive: 'bg-red-100 text-red-800',
      negative: 'bg-green-100 text-green-800',
      uncertain: 'bg-yellow-100 text-yellow-800'
    }
    return colors[result as keyof typeof colors] || 'bg-gray-100 text-gray-800'
  }

  const handleDownloadImage = async (imageUrl: string, patientName: string) => {
    try {
      const response = await fetch(imageUrl)
      const blob = await response.blob()
      const url = window.URL.createObjectURL(blob)
      const link = document.createElement('a')
      link.href = url
      link.download = `${patientName.replace(/\s+/g, '_')}_cataract_scan_${new Date().toISOString().split('T')[0]}.jpg`
      document.body.appendChild(link)
      link.click()
      document.body.removeChild(link)
      window.URL.revokeObjectURL(url)
    } catch (error) {
      console.error('Download failed:', error)
      alert('Failed to download image. Please try again.')
    }
  }

  const handleViewImage = (imageUrl: string) => {
    window.open(imageUrl, '_blank')
  }

  const generateReport = (detection: CataractDetection) => {
    const reportContent = `
CATARACT DETECTION ANALYSIS REPORT
==================================

Patient Information:
- Name: ${detection.patient_name}
- Age: ${detection.patient_age} years
- Analysis Date: ${new Date(detection.created_at).toLocaleDateString()}

Cataract Detection Results:
- Result: ${detection.detection_result.toUpperCase()}
- Confidence: ${(detection.confidence_score * 100).toFixed(1)}%

Clinical Recommendation:
${detection.detection_result === 'positive' 
  ? 'Cataract detected. Immediate consultation with an ophthalmologist is recommended for further evaluation and treatment planning.'
  : detection.detection_result === 'negative'
  ? 'No cataract detected. Continue regular eye examinations and maintain good eye health practices.'
  : 'Uncertain results for cataract detection. Follow-up examination recommended. Consider retaking the scan with better image quality.'
}

---
This report was generated by VisionAid AI Cataract Detection System.
For medical decisions, always consult with a qualified healthcare professional.
    `.trim()

    const blob = new Blob([reportContent], { type: 'text/plain' })
    const url = window.URL.createObjectURL(blob)
    const link = document.createElement('a')
    link.href = url
    link.download = `${detection.patient_name.replace(/\s+/g, '_')}_cataract_report_${new Date(detection.created_at).toISOString().split('T')[0]}.txt`
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
    window.URL.revokeObjectURL(url)
  }

  if (loading) {
    return (
      <div className="bg-white rounded-lg shadow p-6">
        <div className="animate-pulse space-y-4">
          <div className="h-4 bg-gray-200 rounded w-1/4"></div>
          <div className="space-y-3">
            {[1, 2, 3].map((i) => (
              <div key={i} className="flex items-center space-x-4">
                <div className="h-12 w-12 bg-gray-200 rounded"></div>
                <div className="flex-1 space-y-2">
                  <div className="h-4 bg-gray-200 rounded w-3/4"></div>
                  <div className="h-3 bg-gray-200 rounded w-1/2"></div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="bg-white rounded-lg shadow">
      <div className="p-6 border-b border-gray-200">
        <h2 className="text-lg font-semibold text-gray-900 flex items-center">
          <Calendar className="h-5 w-5 mr-2" />
          Recent Cataract Scans
        </h2>
      </div>
      
      <div className="divide-y divide-gray-200">
        {detections.length === 0 ? (
          <div className="p-6 text-center text-gray-500">
            <Eye className="h-12 w-12 mx-auto mb-4 text-gray-300" />
            <p>No cataract scans yet. Upload an image to get started.</p>
          </div>
        ) : (
          detections.map((detection) => (
            <div key={detection.id} className="p-4 hover:bg-gray-50 transition-colors">
              <div className="flex items-start space-x-3">
                <div className="flex-shrink-0">
                  <img
                    src={detection.image_url}
                    alt="Cataract scan"
                    className="h-12 w-12 rounded-lg object-cover border border-gray-200 cursor-pointer hover:opacity-80 transition-opacity"
                    onClick={() => handleViewImage(detection.image_url)}
                  />
                </div>
                
                <div className="flex-1 min-w-0">
                  <div className="flex items-center space-x-2 mb-1">
                    <User className="h-3 w-3 text-gray-400 flex-shrink-0" />
                    <span className="font-medium text-gray-900 text-sm truncate">{detection.patient_name}</span>
                    <span className="text-gray-500 text-xs">({detection.patient_age}y)</span>
                  </div>
                  
                  <div className="flex items-center space-x-2 mb-2">
                    <Calendar className="h-3 w-3 text-gray-400 flex-shrink-0" />
                    <span className="text-xs text-gray-500">
                      {new Date(detection.created_at).toLocaleDateString()}
                    </span>
                  </div>
                  
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-2">
                      <span className={`inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${getResultBadge(detection.detection_result)}`}>
                        {detection.detection_result}
                      </span>
                      <span className="text-xs text-gray-500">
                        {(detection.confidence_score * 100).toFixed(0)}%
                      </span>
                    </div>
                    
                    <div className="flex items-center space-x-1">
                      <button
                        onClick={() => handleViewImage(detection.image_url)}
                        className="p-1.5 text-gray-400 hover:text-blue-600 transition-colors"
                        title="View image"
                      >
                        <ExternalLink className="h-3 w-3" />
                      </button>
                      
                      <button
                        onClick={() => handleDownloadImage(detection.image_url, detection.patient_name)}
                        className="p-1.5 text-gray-400 hover:text-green-600 transition-colors"
                        title="Download image"
                      >
                        <Download className="h-3 w-3" />
                      </button>
                      
                      <button
                        onClick={() => generateReport(detection)}
                        className="p-1.5 text-gray-400 hover:text-purple-600 transition-colors"
                        title="Download report"
                      >
                        <svg className="h-3 w-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                        </svg>
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ))
        )}
      </div>
    </div>
  )
}